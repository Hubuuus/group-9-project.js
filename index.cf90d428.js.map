{"mappings":"iiBAAA,I,EAAAA,EAAAC,EAAA,S,uCAGMC,EAAgBC,SAASC,cAAc,4BACvCC,EAAcF,SAASC,cAAc,0BAErCE,G,EAAoBC,EAAAP,EAAA,CAAAO,EAAAC,GAAAC,MAAA,SAAAC,EAAMC,G,IAIxBC,EACAC,E,kEAJNF,EAAEG,iBACFC,EAAAC,QAAQC,UAAY,GAEdL,EAAMG,EAAAG,SACNL,EAAgBD,EAAIO,KAAI,SAAAC,G,OAC5BC,MACE,sCAAoDC,OAAdF,EAAG,aAAkBE,OAAPC,EAAO,mB,IAIrC,KAAtBR,EAAAC,QAAQC,YAAkBF,EAAAC,QAAQC,UAAY,IAElDO,QAAQC,IAAIZ,GACTa,MAAK,SAAAC,G,OAAaH,QAAQC,IAAIE,EAAUR,KAAI,SAAAS,G,OAAYA,EAASC,M,QACjEH,MAAK,SAAAI,GACJA,EAAKC,SAAQ,SAAAC,G,OAAQC,EAAgBD,E,OAEtCE,OAAM,SAAAC,G,OAASC,QAAQC,IAAIF,E,wDAlBAxB,G,iCAqB1B2B,EAAmB,W,MAAG/B,EAAAP,EAAA,CAAAO,EAAAC,GAAAC,MAAA,SAAAC,EAAMC,G,IAI1BC,EACAC,E,kEAJNF,EAAEG,iBACFC,EAAAC,QAAQC,UAAY,GAEdL,EAAMG,EAAAwB,WACN1B,EAAgBD,EAAIO,KAAI,SAAAC,G,OAC5BC,MACE,sCAAoDC,OAAdF,EAAG,aAAkBE,OAAPC,EAAO,mB,IAIrC,KAAtBR,EAAAC,QAAQC,YAAkBF,EAAAC,QAAQC,UAAY,IAElDO,QAAQC,IAAIZ,GACTa,MAAK,SAAAC,G,OAAaH,QAAQC,IAAIE,EAAUR,KAAI,SAAAS,G,OAAYA,EAASC,M,QACjEH,MAAK,SAAAI,GACJA,EAAKC,SAAQ,SAAAC,G,OAAQC,EAAgBD,E,OAEtCE,OAAM,SAAAC,G,OAASC,QAAQC,IAAIF,E,+DAlBExB,G,gCAAT,GAqBnBY,EAAS,mCAiBf,SAASU,EAAgBO,GACvB,IAAMC,EAAaD,EAAME,OAAOvB,KAAI,SAAAwB,G,OAASA,EAAMC,I,IAC/CC,EAAS,kCAAoDvB,OAAlBkB,EAAMM,aAE3B,OAAtBN,EAAMM,cACRD,EACE,4GAGJ9B,EAAAC,QAAQ+B,mBACN,YACA,+BACgBzB,OADekB,EAAMpB,GAAG,0BACRE,OAAhBuB,EAAO,WAGgBvB,OAHPkB,EAAMQ,MAAM,4IAInC1B,OAD8BkB,EAAMQ,MAAM,wBACF1B,OAAxCmB,EAAWQ,OAAO,EAAG,GAAGC,KAAK,MAAM,OAG1C5B,OAH+CkB,EAAMW,aAAaC,MAClE,EACA,GACA,kD,CAONC,OAAOC,iBAAiB,OAAQhD,GAChCJ,EAAcoD,iBAAiB,QAAShD,GACxCD,EAAYiD,iBAAiB,QAAShB,E","sources":["src/models/add-movie.js"],"sourcesContent":["import axios from 'axios';\nimport { gallery, addMovie, queueMovie } from './modal-movie';\n\nconst btnWatchedLib = document.querySelector('[data-library=\"watched\"]');\nconst btnQueueLib = document.querySelector('[data-library=\"queue\"]');\n\nconst activeFetchLibAdd = async e => {\n  e.preventDefault();\n  gallery.innerHTML = '';\n\n  const ids = addMovie; // przykładowe id filmów\n  const fetchRequests = ids.map(id =>\n    fetch(\n      `https://api.themoviedb.org/3/movie/${id}?api_key=${apiKey}&language=en-US`\n    )\n  );\n\n  if (gallery.innerHTML !== '') gallery.innerHTML = '';\n\n  Promise.all(fetchRequests)\n    .then(responses => Promise.all(responses.map(response => response.json())))\n    .then(data => {\n      data.forEach(item => showAddedMovies(item));\n    })\n    .catch(error => console.log(error));\n};\n\nconst activeFetchLibQueue = async e => {\n  e.preventDefault();\n  gallery.innerHTML = '';\n\n  const ids = queueMovie; // przykładowe id filmów\n  const fetchRequests = ids.map(id =>\n    fetch(\n      `https://api.themoviedb.org/3/movie/${id}?api_key=${apiKey}&language=en-US`\n    )\n  );\n\n  if (gallery.innerHTML !== '') gallery.innerHTML = '';\n\n  Promise.all(fetchRequests)\n    .then(responses => Promise.all(responses.map(response => response.json())))\n    .then(data => {\n      data.forEach(item => showAddedMovies(item));\n    })\n    .catch(error => console.log(error));\n};\n\nconst apiKey = '28e7de8a02a020e11a900cecedfaedb8';\n\nasync function fetchItems() {\n  const params = new URLSearchParams({\n    api_key: apiKey,\n  });\n\n  try {\n    const response = await axios.get(\n      `https://api.themoviedb.org/3/movie/${addMovie.join()}?${params}`\n    );\n    return response.data;\n  } catch (error) {\n    console.log('Error: ', error);\n  }\n}\n\nfunction showAddedMovies(movie) {\n  const genresName = movie.genres.map(genre => genre.name);\n  let poster = `https://image.tmdb.org/t/p/w500${movie.poster_path}`;\n\n  if (movie.poster_path === null) {\n    poster =\n      'https://ik.imagekit.io/paulinas/noTMDBposter.jpg?ik-sdk-version=javascript-1.4.3&updatedAt=1676735394520';\n  }\n  // const poster = `https://image.tmdb.org/t/p/w500${movie.poster_path}`;\n  gallery.insertAdjacentHTML(\n    'beforeend',\n    ` <div class=\"MovieCard\" id=\"${movie.id}\">\n        <img src=\"${poster}\" alt=\"${movie.title}\" loading=\"lazy\" />\n        <div class=\"MovieCardInfo\">\n          <p class=\"MovieCardData\">\n            <span class=\"MovieCardTitle\">${movie.title}</span>\n           ${genresName.splice(0, 3).join(', ')} | ${movie.release_date.slice(\n      0,\n      4\n    )}\n          </p>\n        </div>\n      </div>`\n  );\n}\n\nwindow.addEventListener('load', activeFetchLibAdd);\nbtnWatchedLib.addEventListener('click', activeFetchLibAdd);\nbtnQueueLib.addEventListener('click', activeFetchLibQueue);\n"],"names":["$bpxeT","parcelRequire","$5f5adfbac5f76673$var$btnWatchedLib","document","querySelector","$5f5adfbac5f76673$var$btnQueueLib","$5f5adfbac5f76673$var$activeFetchLibAdd","$parcel$interopDefault","$2TvXO","mark","_callee","e","ids","fetchRequests","preventDefault","$2KQYL","gallery","innerHTML","addMovie","map","id","fetch","concat","$5f5adfbac5f76673$var$apiKey","Promise","all","then","responses","response","json","data","forEach","item","$5f5adfbac5f76673$var$showAddedMovies","catch","error","console","log","$5f5adfbac5f76673$var$activeFetchLibQueue","queueMovie","movie","genresName","genres","genre","name","poster","poster_path","insertAdjacentHTML","title","splice","join","release_date","slice","window","addEventListener"],"version":3,"file":"index.cf90d428.js.map"}