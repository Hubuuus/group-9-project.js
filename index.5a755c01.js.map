{"mappings":"qhBAWA,IAAAA,EAAAC,EAAA,S,iBCXA,SAASC,EAAYC,EAAKC,GACxB,IAAIC,EAAS,GAUb,OARAF,EAAIG,SAAQC,IACV,IAAIC,EAAQJ,EAAIK,MAAKC,GAAQA,EAAKH,KAAOA,IAAII,UAE/BC,IAAVJ,GACFH,EAAOQ,KAAKL,EAAM,IAIfH,C,CDMT,IAAIS,EACJ,MAAMC,EAAUC,SAASC,cAAc,YAIjCC,EAAaF,SAASC,cAAc,gBACpCE,EAAQH,SAASC,cAAc,yBAO9B,MAAMG,EAAqBC,eAGTrB,EAAAsB,QACpBC,IAHsB,kDAGA,CACrBC,OAAQ,CACNC,QAhBQ,sCAoBXC,MAAK,SAAUC,GAGd,OAFAC,QAAQC,IAAI,WAAYF,GACxBC,QAAQC,IAAI,mBAAoBF,EAASG,KAAKC,SACvCJ,C,IAERK,OAAM,SAAUC,GACfL,QAAQC,IAAII,E,IASlBf,EAAWgB,iBAAiB,YAAY,SAASC,GACjC,UAAVA,EAAEC,KACJD,EAAEE,gB,IAMNnB,EAAWgB,iBACT,QACAI,EAAAC,EAAA,EAASlB,MAAMmB,IAEb,GADAA,EAAMH,iBACkB,IAApBnB,EAAWuB,MACb,OAAOC,SAASC,SAGlB,MAAMC,EAAQJ,EAAMK,OAAOJ,MAAMK,OAEjCC,EAAoBH,EAAM,GAtDP,MA2DhB,MAAMG,EAAsB1B,MAAO2B,EAAOC,UAGxBjD,EAAAsB,QACpBC,IAHuB,4CAGA,CACtBC,OAAQ,CACNC,QAhEQ,mCAiERyB,MAAOF,EACPC,KAAMA,KAGTvB,MAAKC,IAuBV,SAAyBA,GAtFvBZ,EAAQoC,UAAY,GAyFpB,MAAMC,EAAWzB,EAASG,KAAKC,QAC/BsB,IAAY3B,MAAKhB,IAEf4C,EAAYF,EADG1C,EACc,G,CA5B3B6C,CAAgB5B,GAQhBR,EAAMqC,UAAUC,IAAI,UACiB,IAAjC9B,EAASG,KAAKC,QAAQ2B,QACxBvC,EAAMqC,UAAUG,OAAO,UAGlBhC,KAERK,OAAM,KACLJ,QAAQC,IAAI,QAAQ,IAiBnB,MAAMwB,EAAYhC,eAIArB,EAAAsB,QACpBC,IAJe,gDAIA,CACdC,OAAQ,CACNC,QA9GQ,sCAiHXC,MAAK,SAAUC,GACd,OAAOA,EAASG,KAAK8B,M,IAEtB5B,OAAM,SAAUC,GACfL,QAAQC,IAAII,E,IAMX,SAASqB,EAAYO,EAAOD,GAKjCC,EAAMzD,KAAI0D,KAMZ,SAAmBA,EAAOC,GACxB,IAAIC,EAAS,kCAAkCF,EAAMG,cACrDlD,EAAQmD,mBACN,YACA,+BAA+BJ,EAAMvD,2BACrByD,qCAA0CA,6JAE/CF,EAAMlB,2JAGgCkB,EAAMlB,wCAE9CmB,EAAWI,OAAO,EAAG,GAAGC,KAAK,WAAWN,EAAMO,aAAaC,MAClE,EACA,oDAMJ,MAAMC,EAAavD,SAASwD,iBAAiB,cAC7C,IAAK,IAAIC,KAAaF,EACpBE,EAAUvC,iBAAiB,SAAS,WAClCpB,EAAU4D,KAAKnE,E,IA3BjBoE,CAAUb,EADS5D,EAAY4D,EAAMc,UAAWhB,GACpB,G,CAmChC5C,SAASkB,iBAAiB,wBErLxBmB,IAAY3B,MAAKhB,IACf,MAAMkD,EAASlD,EAEfU,IAAqBM,MAAKrB,IAExBiD,EADgBjD,EAAOyB,KAAKC,QACP6B,EAAO,GAC5B","sources":["src/models/fetch-functions.js","src/models/genresid-name.js","src/models/present-movies.js"],"sourcesContent":["/*\nŚCIEŻKA DZIAŁANIA PLIKUÓW JS PRZY POBIERNIU TYTUŁÓW FILMÓW Z API\n1. POPULARNE FILMY\n  - presentMovies() -> getGenres() -> fetchPopularMovies() -> createCards\n  - createCards() -> namesGenres() -> movieCard() -> html\n2. WYSZUKIWANE FILMY\n  - eventListener() -> fetchSearchedMovies() -> galleryOfMovies()\n  -> getGenres() -> createCards() -> namesGenres() ->\n  -> movieCard() -> html\n\n*/\nimport axios from 'axios';\nimport { presentMovies } from './present-movies';\nimport debounce from 'lodash.debounce';\nimport { namesGenres } from './genresid-name';\n// import { activeFetch, toggleHidden } from './modal-movie';\n\nlet movieId;\nconst gallery = document.querySelector('.Gallery');\nconst DEBOUNCE_DELAY = 1000;\nconst API_KEY = '28e7de8a02a020e11a900cecedfaedb8';\nconst BASE_URL = 'https://api.themoviedb.org/3/';\nconst inputMovie = document.querySelector('.SearchInput');\nconst alert = document.querySelector('[data-header=\"alert\"]');\n\nexport function clearGallery() {\n  gallery.innerHTML = '';\n}\n\n// FUNCTION AUTOMATICALLY FETCHING MOST POPULAR MOVIES\nexport const fetchPopularMovies = async () => {\n  const urlPopularMovies = 'https://api.themoviedb.org/3/trending/movie/day';\n\n  const response = await axios\n    .get(urlPopularMovies, {\n      params: {\n        api_key: API_KEY,\n        // page: page,\n      },\n    })\n    .then(function (response) {\n      console.log('popular:', response);\n      console.log('popular results:', response.data.results);\n      return response;\n    })\n    .catch(function (error) {\n      console.log(error);\n    });\n\n  return response;\n};\n\n\n\n// OFF ENTER KEY\ninputMovie.addEventListener('keypress', function(e) {\n  if (e.key === 'Enter') {\n    e.preventDefault();\n  }\n});\n\n\n//EVENT LISTENING TO SEARCHBAR INPUT\ninputMovie.addEventListener(\n  'input',\n  debounce(async event => {\n    event.preventDefault();\n    if (inputMovie.value == ''){\n      return location.reload();\n    }\n\n    const title = event.target.value.trim();\n   \n    fetchSearchedMovies(title);\n  }, DEBOUNCE_DELAY)\n);\n\n// FUNCTION FETCHIN MOVIES BY QUERY\nexport const fetchSearchedMovies = async (input, page) => {\n  const urlSearchedMovies = 'https://api.themoviedb.org/3/search/movie';\n\n  const response = await axios\n    .get(urlSearchedMovies, {\n      params: {\n        api_key: API_KEY,\n        query: input,\n        page: page,\n      },\n    })\n    .then(response => {\n      galleryOfMovies(response);\n      // console.log('searched results:', response.data.results);\n      //       alert.innerHTML = ``;\n      // if (response.data.results.length === 0) {\n      //   console.log(\"error\");\n      //   setInterval(alert.innerHTML = `Search result not successful. Enter the correct movie name and search\n      //   again.`, 1000);\n      // }\n      alert.classList.add('hidden');\n      if (response.data.results.length === 0) {\n        alert.classList.remove('hidden');\n      }\n\n      return response;\n    })\n    .catch(() => {\n      console.log('error');\n    });\n\n  return response;\n};\n\nfunction galleryOfMovies(response) {\n  clearGallery();\n  // console.log('RRRR', response.data.results);\n  const searched = response.data.results;\n  getGenres().then(item => {\n    const genres = item;\n    createCards(searched, genres);\n  });\n}\n\n// FUNCTION GETTING GENRES FROM MOVIES\nexport const getGenres = async () => {\n  const urlGenres = 'https://api.themoviedb.org/3/genre/movie/list';\n  // const urlGenres = \"https://api.themoviedb.org/3/genre/movie/list?api_key=${API_KEY}`;\n\n  const response = await axios\n    .get(urlGenres, {\n      params: {\n        api_key: API_KEY,\n      },\n    })\n    .then(function (response) {\n      return response.data.genres;\n    })\n    .catch(function (error) {\n      console.log(error);\n    });\n\n  return response;\n};\n\nexport function createCards(movie, genres) {\n  // console.log('wynik;', movie, genres);\n  // console.log('test movie:', movie[0].genre_ids);\n  // console.log('test genre:', genres[0]);\n\n  movie.map(movie => {\n    const genresName = namesGenres(movie.genre_ids, genres);\n    movieCard(movie, genresName);\n  });\n}\n\nfunction movieCard(movie, genresName) {\n  let poster = `https://image.tmdb.org/t/p/w500${movie.poster_path}`;\n  gallery.insertAdjacentHTML(\n    'beforeend',\n    ` <div class=\"MovieCard\" id=\"${movie.id}\">\n        <img src=\"${poster}\" <img class =\"MoviePoster\" src=\"${poster}\" \n        onerror=\"this.src='https://ik.imagekit.io/paulinas/noTMDBposter.jpg?ik-sdk-version=javascript-1.4.3&updatedAt=1676735394520'\" \n        alt=\"${movie.title}\" loading=\"lazy\" /> \n        <div class=\"MovieCardInfo\">\n          <p class=\"MovieCardData\">\n            <span class=\"MovieCardTitle dark-mode\">${movie.title}\n          </span>\n           ${genresName.splice(0, 3).join(', ')} | ${movie.release_date.slice(\n      0,\n      4\n    )}\n          </p>\n        </div>\n      </div>`\n  );\n  const movieCards = document.querySelectorAll('.MovieCard');\n  for (let movieCard of movieCards) {\n    movieCard.addEventListener('click', function () {\n      movieId = this.id;\n      // console.log('ID: ' + movieId);\n    });\n  }\n  // movieCards.forEach(el => el.addEventListener('click', toggleHidden));\n  // movieCards.forEach(el => el.addEventListener('click', e => activeFetch(e)));\n}\n\ndocument.addEventListener('DOMContentLoaded', presentMovies());\n","function namesGenres(ids, map) {\n  let result = [];\n  // (ids || []).forEach(id => {\n  ids.forEach(id => {\n    let genre = map.find(item => item.id === id).name;\n    // console.log('find:', genre);\n    if (genre !== undefined) {\n      result.push(genre);\n    }\n  });\n  // console.log('result:', result);\n  return result;\n}\n\nexport { namesGenres };\n","import { fetchPopularMovies } from './fetch-functions';\nimport { getGenres, createCards } from './fetch-functions';\n\nexport function presentMovies() {\n  getGenres().then(item => {\n    const genres = item;\n\n    fetchPopularMovies().then(result => {\n      const popular = result.data.results;\n      createCards(popular, genres);\n    });\n  });\n}\n"],"names":["$2shzp","parcelRequire","$8ed6053b63534117$export$a49a60d9fed48f00","ids","map","result","forEach","id","genre","find","item","name","undefined","push","$b8c63253da9a1211$var$movieId","$b8c63253da9a1211$var$gallery","document","querySelector","$b8c63253da9a1211$var$inputMovie","$b8c63253da9a1211$var$alert","$b8c63253da9a1211$export$225b489b0d997c20","async","default","get","params","api_key","then","response","console","log","data","results","catch","error","addEventListener","e","key","preventDefault","$parcel$interopDefault","$50Kfe","event","value","location","reload","title","target","trim","$b8c63253da9a1211$export$5a3232bc12c1888e","input","page","query","innerHTML","searched","$b8c63253da9a1211$export$c5604fa8028da00","$b8c63253da9a1211$export$659b6b545718ce73","$b8c63253da9a1211$var$galleryOfMovies","classList","add","length","remove","genres","movie1","movie","genresName","poster","poster_path","insertAdjacentHTML","splice","join","release_date","slice","movieCards","querySelectorAll","movieCard1","this","$b8c63253da9a1211$var$movieCard","genre_ids"],"version":3,"file":"index.5a755c01.js.map"}